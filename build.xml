<project name="funz-core" default="help" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<property name="funz-root.dir" value="${basedir}/.." />
	<property name="funz.properties" location="../funz-profile/funz.properties" />

	<!-- funz dependent properties -->
	<property file="${funz.properties}" />

	<!-- verify that the ${funz.properties} file has been set -->
	<fail message="Set the funz properties file ${funz.properties} from funz-profile">
		<condition>
			<not>
				<and>
					<available file="${funz.properties}" type="file" />
				</and>
			</not>
		</condition>
	</fail>

	<!-- funz core dependent properties -->
	<property file="funz-core.properties"/>

	<property name="constants.java" location="${src.dir}/org/funz/constants/Constants.java" />
	<property name="constants.tmpl" location="${src.dir}/org/funz/constants/Constants.tmpl" />


	<!-- Clean targets -->
	<!-- ************* -->
	<target name="clean-build">
		<delete dir="${build.dir}" failonerror="false" />
		<delete dir="${coverage.dir}" failonerror="false" />
	</target>
			
	<target name="clean-dist">
		<delete dir="${dist.dir}" failonerror="false" />
	</target>

	<target name="clean-doc">
		<delete dir="${doc.dir}" failonerror="false" />
	</target>

	<target name="clean" depends="clean-build, clean-dist, clean-doc" description="clean almost everything that can be generated by ant targets" />


	<!-- Compile targets -->
	<!-- *************** -->
	<target name="generateConstants">
		<copy file="${constants.tmpl}" tofile="${constants.java}" overwrite="true" />
		<echo message="Version: ${core.version}"/>
		<replace file="${constants.java}" token="__VERSION__" value="${core.version}" />
		<tstamp>
			<format property="build.date" pattern="dd/MM/yyyy HH:mm"/>
		</tstamp>
		<echo message="Build date: ${build.date}"/>
		<replace file="${constants.java}" token="__BUILDATE__" value="${build.date}" />
	</target>

	<target name="compileOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compileOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compile" depends="generateConstants, compileOnWindows, compileOnUnix" description="compile the source "/>


	<!-- Distribution targets -->
	<!-- ******************** -->
	<target name="distOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="distOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="dist" depends="compile, distOnUnix, distOnWindows" description="generate the distribution">
		<copy toFile="${dist.lib.dir}/${core.jar}">
			<fileset dir="target">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>


	<!-- Tests targets -->
	<!-- ************* -->
	<target name="prepareTests">
		<copy todir="." >
			<fileset file="${test.resources.dir}/*"/>
		</copy>
		<chmod perm="a+x">
			<fileset dir=".">
				<include name="*.bat" />
				<include name="*.sh" />
			</fileset>
		</chmod>
	</target>

	<target name="testOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn clean install'" />
		</exec>
	</target>

	<target name="testOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn clean install'" />
		</exec>
	</target>

	<target name="test" depends="testOnWindows, testOnUnix" description="run tests"/>


	<!-- Documentation targets -->
	<!-- ********************* -->
	<target name="docOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="docOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="doc" depends="docOnUnix, docOnWindows" description="generate the code documentation" />

	<!-- help -->
	<target name="help" description="display the help on standard output">
		<echo message="********************************" />
		<echo message="          Funz core" />
		<echo message="********************************" />
		<echo />
		<echo message="help                 :   display this help" />
		<echo message="clean                :   clean everything that can be generated by ant targets" />
		<echo message="dist                 :   generate a distribution" />
		<echo message="test                 :   run tests" />
		<echo message="doc                  :   generate the code documentation" />
	</target>


</project>
